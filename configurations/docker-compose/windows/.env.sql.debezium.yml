version: "3"
services:
    postgres:
        image: postgres:10.18-alpine3.14 # 指定 PostgreSQL 的版本
        container_name: postgres
        hostname: postgres
        restart: always # 容器随docker启动自启
        environment:
            POSTGRES_DB: frame-cloud # 初始化数据库的名称
            POSTGRES_USER: postgres # 初始化用户名
            POSTGRES_PASSWORD: postgres # 初始化密码
#        volumes:
#            - ../../data/postgresql/data:/var/lib/postgresql/data:rwx # 挂载卷以持久化数据
#            - ../../data/postgresql/pg_hba.conf:/etc/postgresql/data/pg_hba.conf # 挂载自定义的pg_hba.conf文件
        ports:
            - "5432:5432"

    mysql: # 服务名称 建议与容器名称一致
#        image: mysql:8.4.3 # 当前数据库的版本
        image: nacos/nacos-mysql:5.7
        container_name: mysql # 容器名称
        environment:
            - MYSQL_ROOT_PASSWORD=root
            - MYSQL_DATABASE=nacos_devtest
            - MYSQL_USER=nacos
            - MYSQL_PASSWORD=nacos
        volumes:
            - ../../data/mysql/logs:/logs # 映射日志目录，宿主机:容器
            - ../../data/mysql/data:/var/lib/mysql # 映射数据目录，宿主机:容器
            - ../../data/mysql/conf/my.cnf:/etc/mysql/my.cnf
        ports:
            - "3306:3306" # 指定宿主机端口与容器端口映射关系，宿主机:容器，宿主机ip根据使用情况进行修改
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
            interval: 10s
            timeout: 5s
            retries: 3
        restart: always # 容器随docker启动自启

    zookeeper:
        image: debezium/zookeeper:2.5
        container_name: zookeeper
        hostname: zookeeper
        restart: always # 容器随docker启动自启
        environment:
            ZOOKEEPER_SERVER_ID: 1
        ports:
            - "2181:2181"
            - "2888:2888"
            - "3888:3888"

    redis: # 定义一个名为redis的服务
        container_name: redis # 设置容器的名称为redis
        hostname: redis
        image: redis:7 # 指定使用的镜像及其版本，这里使用的是Redis 7
        restart: always # 设置容器总是重启，无论退出代码是什么
        ports: # 映射端口开始
            - "6379:6379" # 将容器的6379端口映射到宿主机的6379端口
        volumes: # 设置卷，用于数据持久化和配置文件的映射
            - ../../data/redis/redis.conf:/etc/redis/redis.conf:ro # 将宿主机当前目录下的redis.conf映射到容器的/etc/redis/redis.conf，并设置为只读模式
            - ../../data/redis/data:/data:rw # 将宿主机当前目录下的data目录映射到容器的/data目录，并设置为读写模式
        command: # 容器启动后执行的命令
            redis-server /etc/redis/redis.conf   # 使用指定的配置文件启动Redis服务器
        healthcheck: # 健康检查配置
            test: [ "CMD", "redis-cli", "-a", "Black.123!@#", "ping" ] # 使用健康检查命令进行检测.如果连续三次检查失败，Docker会认为服务是不健康的。
            interval: 30s # 设置健康检查的间隔时间为30秒
            timeout: 10s # 设置健康检查的超时时间为10秒
            retries: 3 # 设置健康检查的重试次数为3次
        logging: # 日志配置
            driver: json-file # 设置日志驱动为json-file 默认也为json-file
            options: # 配置日志选项
                max-size: "200m" # 设置日志文件的最大大小为200MB
                max-file: "10" # 设置日志文件的最大数量为10个

    nacos:
        image: nacos/nacos-server:v2.3.1
        container_name: nacos
        hostname: nacos
        restart: always # 容器随docker启动自启
        environment:
            MODE: standalone
            SPRING_DATASOURCE_PLATFORM: mysql
            MYSQL_SERVICE_HOST: mysql
            MYSQL_SERVICE_PORT: 3306
            MYSQL_SERVICE_USER: nacos
            MYSQL_SERVICE_PASSWORD: nacos
            MYSQL_SERVICE_DB_NAME: nacos_devtest
            MYSQL_SERVICE_DB_PARAM: characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&allowPublicKeyRetrieval=true&serverTimezone=GMT%2B8
            NACOS_AUTH_IDENTITY_KEY: serverIdentity
            NACOS_AUTH_IDENTITY_VALUE: security
            NACOS_AUTH_TOKEN: SecretKey012345678901234567890123456789012345678901234567890123456789
#        volumes:
#            - ../../data/nacos/conf:/home/nacos/conf
#            - ../../data/nacos/logs:/home/nacos/logs
#            - ../../data/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
        ports:
            - "8848:8848"
            - "9848:9848"
            - "9849:9849"
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8848/nacos" ]
            interval: 10s
            timeout: 5s
            retries: 3
        depends_on:
            - mysql
    kafka:
        image: debezium/kafka:2.5
        container_name: kafka
        hostname: kafka
        restart: always # 容器随docker启动自启
        ports:
            - "9092:9092"
        environment:
            BROKER_ID: 1
            ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENERS: LISTENER_INNER://kafka:29092,LISTENER_OUTER://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: LISTENER_INNER://kafka:29092,LISTENER_OUTER://127.0.0.1:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INNER:PLAINTEXT,LISTENER_OUTER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INNER
            KAFKA_ALLOW_PLAINTEXT_LISTENER: 'yes'
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        depends_on:
            - zookeeper

    sentinel:
        image: bladex/sentinel-dashboard
        container_name: sentinel-dashboard
        restart: always # 容器随docker启动自启
        environment:
            SENTINEL_ADMIN_USERNAME: sentinel
            SENTINEL_ADMIN_PASSWORD: sentinel
        ports:
            - "8858:8858"









